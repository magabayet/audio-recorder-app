#!/bin/bash

# Audio Recorder - Script de inicio
echo "üéôÔ∏è Iniciando Audio Recorder con Transcripci√≥n..."

# Colores para la terminal
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Directorio base de la aplicaci√≥n
APP_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$APP_DIR"

# Funci√≥n para verificar si un puerto est√° en uso
check_port() {
    lsof -i :$1 > /dev/null 2>&1
    return $?
}

# Funci√≥n para matar proceso en un puerto
kill_port() {
    local PORT=$1
    local PID=$(lsof -t -i:$PORT)
    if [ ! -z "$PID" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Cerrando proceso existente en puerto $PORT...${NC}"
        kill -9 $PID 2>/dev/null
        sleep 1
    fi
}

# Verificar si Node.js est√° instalado
if ! command -v node &> /dev/null; then
    echo -e "${RED}‚ùå Node.js no est√° instalado. Por favor inst√°lalo primero.${NC}"
    echo "Puedes descargarlo desde: https://nodejs.org/"
    exit 1
fi

# Verificar y liberar puertos si est√°n ocupados
if check_port 5001; then
    echo -e "${YELLOW}Puerto 5001 est√° en uso${NC}"
    kill_port 5001
fi

if check_port 3000; then
    echo -e "${YELLOW}Puerto 3000 est√° en uso${NC}"
    kill_port 3000
fi

# Instalar dependencias si no existen
echo -e "${GREEN}üì¶ Verificando dependencias...${NC}"

if [ ! -d "backend/node_modules" ]; then
    echo "Instalando dependencias del backend..."
    cd backend
    npm install
    cd ..
fi

if [ ! -d "frontend/node_modules" ]; then
    echo "Instalando dependencias del frontend..."
    cd frontend
    npm install
    cd ..
fi

# Crear archivo .env si no existe
if [ ! -f "backend/.env" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Archivo .env no encontrado. Creando uno nuevo...${NC}"
    echo "OPENAI_API_KEY=your_openai_api_key_here" > backend/.env
    echo "PORT=5001" >> backend/.env
    echo -e "${RED}‚ö†Ô∏è  IMPORTANTE: Edita backend/.env y agrega tu API key de OpenAI${NC}"
fi

# Funci√≥n para limpiar al salir
cleanup() {
    echo -e "\n${YELLOW}üõë Cerrando aplicaci√≥n...${NC}"
    # Matar procesos del backend y frontend
    kill_port 5001
    kill_port 3000
    # Matar procesos por nombre si existen
    pkill -f "node.*server.js" 2>/dev/null
    pkill -f "react-scripts start" 2>/dev/null
    exit 0
}

# Capturar se√±ales de salida
trap cleanup EXIT INT TERM

# Iniciar el backend
echo -e "${GREEN}üöÄ Iniciando servidor backend en puerto 5001...${NC}"
cd backend
node server.js &
BACKEND_PID=$!
cd ..

# Esperar a que el backend est√© listo
sleep 3

# Verificar si el backend est√° corriendo
if ! kill -0 $BACKEND_PID 2>/dev/null; then
    echo -e "${RED}‚ùå Error al iniciar el backend${NC}"
    exit 1
fi

# Iniciar el frontend
echo -e "${GREEN}üåê Iniciando aplicaci√≥n web en puerto 3000...${NC}"
cd frontend

# Configurar variable de entorno para no abrir el navegador autom√°ticamente
export BROWSER=none

# Iniciar React
npm start &
FRONTEND_PID=$!
cd ..

# Esperar un poco para que todo se inicie
sleep 5

# Abrir el navegador
echo -e "${GREEN}üåç Abriendo aplicaci√≥n en el navegador...${NC}"
open http://localhost:3000

echo -e "${GREEN}‚úÖ Aplicaci√≥n iniciada correctamente!${NC}"
echo -e "${YELLOW}üìù Logs:${NC}"
echo "   - Backend corriendo en: http://localhost:5001"
echo "   - Frontend corriendo en: http://localhost:3000"
echo ""
echo -e "${YELLOW}Para detener la aplicaci√≥n, presiona Ctrl+C${NC}"

# Mantener el script corriendo
wait